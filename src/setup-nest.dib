#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!csharp

#!import ./common.dib

#!csharp

#!import ./setup-clients.dib

#!markdown

# Index Management

#!markdown

### Create Index

#!csharp

const string PostsIndex = "posts";
var createResponse = await _client.Indices.CreateAsync(
    PostsIndex, c => c.Map<BlogPost>(m => m.AutoMap()));

DumpResponse(createResponse);

#!markdown

### Get Index Info

#!csharp

var dataIndexResponse = await client.Indices.GetAsync(PostsIndex);
var dataIndex = dataIndexResponse.Indices.First().Value;

DumpResponse(dataIndexResponse);
// display(dataIndex.Mappings.Properties);

#!markdown

### Delete Index

#!csharp

var response = await client.Indices.DeleteAsync(PostsIndex);
DumpResponse(response);

#!markdown

### Seed Data

#!csharp

using Microsoft.Data.Analysis;

Bogus.Randomizer.Seed = new Random(123);

var faker = new Bogus.Faker<BlogPost>()
    .RuleFor(p => p.Id, f => f.Random.Number(int.MaxValue))
    .RuleFor(p => p.Title, f => f.Commerce.ProductName())
    .RuleFor(p => p.Description, f => f.Lorem.Paragraph())
    .RuleFor(p => p.Author, f => f.Name.FullName())
    .RuleFor(p => p.CreatedAt, f => f.Date.Past());

var posts = faker.Generate(1000);

var ids = new Int32DataFrameColumn("Id", posts.Select(p => p.Id));
var createdAt = new DateTimeDataFrameColumn("CreatedAt", posts.Select(p => p.CreatedAt));
var titles = new StringDataFrameColumn("Title", posts.Select(p => p.Title));
var descriptions = new StringDataFrameColumn("Description", posts.Select(p => p.Description));
var authors = new StringDataFrameColumn("Author", posts.Select(p => p.Author));
var dataFrame = new DataFrame(ids, createdAt, titles, descriptions, authors);

display(dataFrame);

#!csharp

var bulkResponse = await _client.BulkAsync(b => b
    .Index(PostsIndex)
    .IndexMany(posts)
);

DumpResponse(bulkResponse);
